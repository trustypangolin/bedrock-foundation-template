resource "aws_iam_role" "bedrock_snapshot_size_manager_role" {
  name                 = "bedrock-SnapshotSizeManager"
  max_session_duration = 3600
  managed_policy_arns  = ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
  assume_role_policy   = data.aws_iam_policy_document.event_lambda.json
  inline_policy {
    name   = "OperationalAssumeMember"
    policy = data.aws_iam_policy_document.cross_account.json
  }
  inline_policy {
    name   = "SNSPublish"
    policy = data.aws_iam_policy_document.publish_sns.json
  }
  inline_policy {
    name   = "KMSAccess"
    policy = data.aws_iam_policy_document.kms.json
  }
  inline_policy {
    name   = "SQSAccess"
    policy = data.aws_iam_policy_document.publish_sqs.json
  }
  inline_policy {
    name   = "SnapshotSizeManager"
    policy = data.aws_iam_policy_document.snapshotsize.json
  }
  tags = var.tags
}

resource "aws_sqs_queue" "SnapshotSizeManager_queue" {
  name                       = "bedrock-snapshotsizemanager-MainSQS"
  delay_seconds              = 0
  max_message_size           = 2048
  message_retention_seconds  = 345600
  visibility_timeout_seconds = 1000
  receive_wait_time_seconds  = 10
}

# -- Create Function
#--------------------------------------------------------------------------------------------------
data "archive_file" "snapshot_size_manager_lambda_zip" {
  type        = "zip"
  source_file = "./lambda/snapshot-size-manager.py"
  output_path = "./lambda/snapshot-size-manager.zip"
}

data "archive_file" "worker_snapshot_size_manager_lambda_zip" {
  type        = "zip"
  source_file = "./lambda/worker-snapshot-size-manager.py"
  output_path = "./lambda/worker-snapshot-size-manager.zip"
}

resource "aws_lambda_function" "snapshot_size_manager_function" {
  function_name = "bedrock-Snapshot-Size-Manager"
  description   = "Estimate actual consumed GB of a child snapshot"
  dead_letter_config {
    target_arn = join(":", [
      "arn:aws:sns",
      local.base_region,
      lookup(data.terraform_remote_state.org.outputs.acc, "Audit"),
      "bedrock-audit-deadletter"
    ])
  }
  handler = "snapshot-size-manager.handler"
  runtime = "python3.8"
  timeout = 900
  role    = aws_iam_role.bedrock_snapshot_size_manager_role.arn
  environment {
    variables = {
      REGIONS      = var.lambdaregions.ec2snapshotsz
      MEMBERACCT   = join(",", (data.terraform_remote_state.org.outputs.ops_accounts))
      MEMBERROLE   = var.crossaccountrole.lambda
      ENV_SQSQUEUE = aws_sqs_queue.SnapshotSizeManager_queue.id
    }
  }
  tags     = merge(var.common_tags, var.tags)
  filename = "./lambda/snapshot-size-manager.zip"
}

resource "aws_lambda_function" "worker_snapshot_size_manager_function" {
  function_name = "bedrock-Worker-Snapshot-Size-Manager"
  description   = "Estimate snapshot size worker"
  dead_letter_config {
    target_arn = join(":", [
      "arn:aws:sns",
      local.base_region,
      lookup(data.terraform_remote_state.org.outputs.acc, "Audit"),
      "bedrock-audit-deadletter"
    ])
  }
  handler = "worker-snapshot-size-manager.handler"
  runtime = "python3.8"
  timeout = 900
  role    = aws_iam_role.bedrock_snapshot_size_manager_role.arn
  environment {
    variables = {
      TAGS_TO_COPY = "Used"
      REGIONS      = var.lambdaregions.ec2snapshotsz
      MEMBERACCT   = join(",", (data.terraform_remote_state.org.outputs.ops_accounts))
      MEMBERROLE   = var.crossaccountrole.lambda
      ENV_SQSQUEUE = aws_sqs_queue.SnapshotSizeManager_queue.id
    }
  }
  tags     = var.tags
  filename = "./lambda/worker-snapshot-size-manager.zip"
}

resource "aws_lambda_event_source_mapping" "LambdaWorkerSnapshotSizeManager" {
  event_source_arn = aws_sqs_queue.SnapshotSizeManager_queue.arn
  function_name    = aws_lambda_function.worker_snapshot_size_manager_function.arn
  batch_size       = 1
}


#--------------------------------------------------------------------------------------------------
resource "aws_cloudwatch_event_rule" "snapshot_size_manager_event_rule" {
  name                = "bedrock-Snapshot-Size-Manager-event-rule"
  description         = "Run the EBS snapshot calculator script on a schedule"
  schedule_expression = var.lambdacron.ec2snapshotsz
  is_enabled          = true
}

resource "aws_cloudwatch_event_target" "snapshot_size_manager_function" {
  rule      = aws_cloudwatch_event_rule.snapshot_size_manager_event_rule.name
  target_id = "Function"
  arn       = aws_lambda_function.snapshot_size_manager_function.arn
}

# -- Function logging
#--------------------------------------------------------------------------------------------------
resource "aws_lambda_permission" "snapshot_size_manager_allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.snapshot_size_manager_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_target.snapshot_size_manager_function.arn
}

resource "aws_cloudwatch_log_group" "snapshot_size_manager_lambda_log_group" {
  name              = "/aws/lambda/${aws_lambda_function.snapshot_size_manager_function.function_name}"
  retention_in_days = 3
}

resource "aws_cloudwatch_log_group" "worker_snapshot_size_manager_lambda_log_group" {
  name              = "/aws/lambda/${aws_lambda_function.worker_snapshot_size_manager_function.function_name}"
  retention_in_days = 3
}
